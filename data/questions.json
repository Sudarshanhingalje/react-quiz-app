{
  "questions": [
    {
      "question": "What is React primarily used for?",
      "options": [
        "Game development",
        "Server-side scripting",
        "Building user interfaces",
        "Database management"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is a component in React?",
      "options": [
        "A server file",
        "A reusable piece of UI",
        "A React method",
        "A function that returns CSS"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which hook is used to manage state in a functional component?",
      "options": ["useEffect", "useRef", "useState", "useContext"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "React is maintained by which company?",
      "options": ["Microsoft", "Facebook", "Amazon", "Google"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What does JSX stand for?",
      "options": [
        "Java Syntax Extension",
        "JavaScript XML",
        "JavaScript Xlink",
        "JavaScript Extra"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How do you create a functional component in React?",
      "options": [
        "Using class",
        "Using function",
        "Using JSX tag",
        "Using variable only"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which hook is used to handle side effects?",
      "options": ["useCallback", "useEffect", "useState", "useMemo"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is returned by useState?",
      "options": [
        "A single value",
        "A number",
        "An array with state and setter",
        "An object"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the virtual DOM?",
      "options": [
        "The browser DOM",
        "A copy of the real DOM",
        "Reactâ€™s compiled DOM",
        "An HTML file"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Why is the virtual DOM faster?",
      "options": [
        "It writes directly to disk",
        "It avoids re-rendering the whole DOM",
        "It uses server cache",
        "It is smaller in size"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What are props in React?",
      "options": [
        "Global variables",
        "Component methods",
        "Inputs passed to components",
        "React hooks"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the key prop used for in React?",
      "options": [
        "To uniquely identify elements in a list",
        "To define a primary key in a DB",
        "To store global state",
        "To pass props between nested components"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Which is NOT a valid React lifecycle method?",
      "options": [
        "componentDidMount",
        "useEffect",
        "componentWillMount",
        "onRender"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which keyword creates a React component using ES6 class syntax?",
      "options": ["class", "constructor", "function", "object"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What does lifting state up mean in React?",
      "options": [
        "Moving state to Redux",
        "Moving state to the backend",
        "Moving state to a parent component",
        "Moving state to a child component"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Can we use JavaScript in JSX?",
      "options": [
        "Yes, with double curly braces",
        "Yes, inside {} brackets",
        "No",
        "Yes, with square brackets"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which hook is used to persist values across renders without triggering a re-render?",
      "options": ["useMemo", "useRef", "useState", "useEffect"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "React follows which kind of data flow?",
      "options": [
        "Circular",
        "Unidirectional",
        "Bidirectional",
        "Multidirectional"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What does ReactDOM.render do?",
      "options": [
        "Compiles JSX",
        "Renders a React component to the DOM",
        "Connects backend to frontend",
        "Renders HTML only"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Why are keys important in lists?",
      "options": [
        "They increase SEO",
        "They help React identify which items changed",
        "They make lists look better",
        "They reduce bundle size"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the use of useCallback hook?",
      "options": [
        "To memoize components",
        "To cache functions",
        "To run effects after render",
        "To handle routing"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which React hook is best for performance optimization?",
      "options": ["useRef", "useCallback", "useMemo", "useEffect"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the purpose of useReducer?",
      "options": [
        "To fetch data",
        "To manage complex state logic",
        "To manage styles",
        "To reduce API calls"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the correct way to conditionally render in JSX?",
      "options": [
        "Using switch statements",
        "Using if-else only",
        "Using ternary or logical && operators",
        "Using for loops"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which of these is a controlled component?",
      "options": [
        "An input with value from useState",
        "An uncontrolled input",
        "A component using props only",
        "A component with no state"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the role of React Router?",
      "options": [
        "To add styles",
        "To manage navigation",
        "To fetch APIs",
        "To build custom hooks"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which tool is used to create a new React project?",
      "options": [
        "create-react-project",
        "npx create-react-app",
        "npm init react",
        "react-new-project"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is React.Fragment used for?",
      "options": [
        "To group elements without adding extra nodes",
        "To break components",
        "To define context",
        "To display fragments only"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How to apply inline styles in JSX?",
      "options": [
        "Using className",
        "Using <style>",
        "Using style={{ key: 'value' }}",
        "Using CSS files"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which method is used to update the state in class components?",
      "options": ["setState", "useState", "updateState", "changeState"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the main difference between props and state in React?",
      "options": [
        "Props are mutable, state is not",
        "State is passed between components, props are not",
        "Props are read-only, state can be changed",
        "There is no difference"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What happens if you update state directly in React?",
      "options": [
        "The component will re-render",
        "It will throw an error",
        "Nothing will happen",
        "The update will be lost and not trigger a re-render"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What is a pure component?",
      "options": [
        "A component that only uses props",
        "A component with no styles",
        "A component that renders the same output for the same state and props",
        "A functional component"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which hook replaces lifecycle methods in functional components?",
      "options": ["useContext", "useMemo", "useEffect", "useLayout"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is useLayoutEffect used for?",
      "options": [
        "To optimize rendering",
        "To run code after DOM mutations but before paint",
        "To avoid re-renders",
        "To manage global state"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Why do we use keys in lists in React?",
      "options": [
        "To give styles",
        "To improve rendering performance and avoid unnecessary updates",
        "To show items in bold",
        "To create indexes"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is a higher-order component (HOC)?",
      "options": [
        "A component that returns a hook",
        "A function that takes a component and returns a new component",
        "A way to create context",
        "A method to handle state"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What is prop drilling?",
      "options": [
        "Passing props through multiple levels of components",
        "Reading props using useEffect",
        "Passing functions to props",
        "Directly modifying props"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which method prevents re-rendering of child components?",
      "options": ["useRef", "React.memo", "useReducer", "React.halt"],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Which hook can be used to share state globally?",
      "options": ["useRef", "useMemo", "useContext", "useCallback"],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the default behavior of useEffect with an empty dependency array?",
      "options": [
        "Runs on every render",
        "Runs only on the first render",
        "Never runs",
        "Runs on unmount"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Why shouldn't we update state in useEffect without dependencies?",
      "options": [
        "It will cause a compile error",
        "It can cause an infinite loop",
        "It wonâ€™t affect anything",
        "It disables strict mode"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What is the purpose of useMemo?",
      "options": [
        "To avoid function recreation",
        "To memorize values between renders",
        "To store DOM elements",
        "To track route history"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How can we prevent default form submission in React?",
      "options": [
        "By not using submit",
        "By using return false",
        "By calling event.preventDefault()",
        "By hiding the button"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which library is commonly used with React for form handling?",
      "options": [
        "React Hook Form",
        "Formik",
        "Redux Form",
        "All of the above"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is controlled vs uncontrolled components in forms?",
      "options": [
        "Controlled has internal state, uncontrolled uses props",
        "Controlled is driven by props, uncontrolled uses refs",
        "Controlled uses refs, uncontrolled uses hooks",
        "Controlled submits automatically"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What is the use of useRef in React?",
      "options": [
        "To persist values across renders",
        "To store component props",
        "To rerender components",
        "To return a unique ID"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Which of the following is true about React keys?",
      "options": [
        "They should be unique among siblings",
        "They must be random",
        "They should change after every render",
        "They must be integers"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How do you perform navigation in React Router?",
      "options": [
        "Using <Redirect>",
        "Using window.location",
        "Using useNavigate()",
        "Using useLocation()"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is lazy loading in React?",
      "options": [
        "Postponing render",
        "Loading data on scroll",
        "Loading components only when needed",
        "Loading CSS files"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Which method is used to fetch data in React?",
      "options": [
        "getData()",
        "useAxios()",
        "useEffect() + fetch()",
        "componentFetch()"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which hook would you use to focus an input element?",
      "options": ["useState", "useEffect", "useRef", "useInput"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How can you share logic between components in React?",
      "options": [
        "Using HOC or custom hooks",
        "Using Redux",
        "By using props",
        "Using useEffect"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which of these is true about default props?",
      "options": [
        "They must be declared inside useState",
        "They override the props passed",
        "They act as fallback values",
        "Theyâ€™re required in all components"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Why do we use React.StrictMode?",
      "options": [
        "To write strict CSS",
        "To enforce best practices and highlight potential problems",
        "To avoid re-renders",
        "To manage Redux"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which lifecycle method is used to clean up timers or subscriptions?",
      "options": [
        "componentDidMount",
        "useState",
        "useCleanup",
        "useEffect with return"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "How to create custom hooks?",
      "options": [
        "By starting function name with 'custom'",
        "By exporting a React component",
        "By creating a function starting with 'use'",
        "Hooks canâ€™t be custom"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is context in React used for?",
      "options": [
        "Managing HTTP calls",
        "Passing props to siblings or nested components",
        "Reducing bundle size",
        "Improving performance"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How to memoize a component?",
      "options": ["useMemo()", "React.memo()", "useCallback()", "useRef()"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the role of children prop in React?",
      "options": [
        "It returns component name",
        "It allows components to be nested",
        "It adds event listeners",
        "It modifies state"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which package is needed to use React Router v6?",
      "options": [
        "react-dom-router",
        "react-router-dom",
        "react-routing",
        "router-react"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the default method used for conditional navigation in React Router v6?",
      "options": ["usePath()", "navigate()", "useNavigate()", "pushState()"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which of the following best describes the Context API?",
      "options": [
        "A hook for HTTP requests",
        "A tool to avoid prop drilling",
        "A routing mechanism",
        "A React lifecycle"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How does React handle forms?",
      "options": [
        "Through external libraries only",
        "Through refs only",
        "Using controlled or uncontrolled components",
        "Using setForm hook"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the default behavior of a form submit event?",
      "options": [
        "It submits data via AJAX",
        "It refreshes the page",
        "It updates state only",
        "It triggers Redux"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How do you pass methods to child components?",
      "options": ["Via state", "Via props", "Via refs", "Via context only"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Why is useCallback used in React?",
      "options": [
        "To handle asynchronous code",
        "To prevent function re-creation between renders",
        "To fetch data",
        "To execute code before render"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is code splitting?",
      "options": [
        "Separating logic from view",
        "Splitting app into components",
        "Loading JS bundles on demand",
        "Making multiple CSS files"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which method helps you lazy load components?",
      "options": ["useLazy()", "React.lazy()", "React.defer()", "useEffect()"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is Suspense used for in React?",
      "options": [
        "To define prop types",
        "To wrap error boundaries",
        "To show fallback while lazy loading components",
        "To debug components"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which of the following is true about useRef?",
      "options": [
        "It resets on every render",
        "It triggers a re-render when updated",
        "It persists across renders and doesnâ€™t trigger re-render",
        "It cannot store values"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What happens if you update a React component's state inside render?",
      "options": [
        "It throws an error",
        "It creates an infinite loop",
        "It works as expected",
        "It returns undefined"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Why should we avoid anonymous functions in JSX props?",
      "options": [
        "They increase bundle size",
        "They make debugging easier",
        "They cause performance issues due to re-renders",
        "They break routing"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the recommended way to structure large React apps?",
      "options": [
        "Put all code in App.js",
        "Use separate folders for components, pages, and hooks",
        "Write everything in index.js",
        "Use inline CSS for all elements"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How are default props defined in functional components?",
      "options": [
        "Inside the return statement",
        "Using defaultProps property",
        "Using useDefault() hook",
        "Inside the component body"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which is a valid way to fetch API data in React?",
      "options": [
        "Inside useEffect",
        "Inside JSX",
        "In return statement",
        "Only in class components"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What is the correct way to dynamically render a list?",
      "options": [
        "Using a for loop",
        "Using a map function",
        "Using switch case",
        "Using filter"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which is NOT a valid React hook?",
      "options": ["useState", "useContext", "useService", "useReducer"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How can you optimize React performance?",
      "options": [
        "Using React.memo, useMemo, and useCallback",
        "Using inline styles",
        "Avoiding keys",
        "Using large bundles"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What is reconciliation in React?",
      "options": [
        "The process of matching old and new DOM trees",
        "Fixing CSS conflicts",
        "Merging multiple props",
        "Re-rendering with Redux"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "How does React batch state updates?",
      "options": [
        "In strict mode only",
        "By using promises",
        "Automatically inside event handlers",
        "It doesnâ€™t batch"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is an error boundary?",
      "options": [
        "A try/catch block in hooks",
        "A way to catch JavaScript errors in UI",
        "A router redirect",
        "An HOC used for routing"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Which lifecycle method is triggered after a component updates?",
      "options": [
        "componentDidMount",
        "componentWillUnmount",
        "componentDidUpdate",
        "componentRender"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which hook can be used to implement undo/redo functionality?",
      "options": ["useState", "useReducer", "useMemo", "useEffect"],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "How to prevent a useEffect from running twice in React StrictMode?",
      "options": [
        "Remove StrictMode",
        "Use a flag inside useEffect",
        "Avoid async functions",
        "It canâ€™t be prevented"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What is hydration in React?",
      "options": [
        "Re-rendering the virtual DOM",
        "Attaching event listeners to server-rendered HTML",
        "Syncing state with Redux",
        "Watering state"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What does ReactDOM.hydrate do?",
      "options": [
        "Converts HTML to JSX",
        "Adds watermarks to components",
        "Attaches React to existing HTML",
        "Renders a component normally"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Which is true about JSX?",
      "options": [
        "JSX must return only one element",
        "JSX can return two elements",
        "JSX supports inline functions",
        "JSX supports if-else directly"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Why is key not accessible via props inside a component?",
      "options": [
        "It is reserved by React",
        "It is passed automatically",
        "It canâ€™t be used inside components",
        "It causes an error"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What is the main benefit of SSR (Server-Side Rendering) with React?",
      "options": [
        "Better animations",
        "Improved SEO and faster first load",
        "Fewer components",
        "It replaces routing"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What is JSX?",
      "options": [
        "A CSS preprocessor",
        "A JavaScript syntax extension that looks like HTML",
        "A new JavaScript version",
        "A React data store"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "How do you comment inside JSX?",
      "options": [
        "// comment",
        "/* comment */",
        "{// comment}",
        "{/* comment */}"
      ],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What is the virtual DOM?",
      "options": [
        "A copy of the real DOM stored in memory",
        "An HTML parser",
        "A DOM created from JSX",
        "The actual browser DOM"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Why is React considered declarative?",
      "options": [
        "Because it uses class components",
        "Because you describe what you want to see",
        "Because it avoids loops",
        "Because it doesnâ€™t support conditionals"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which file is usually the entry point in a React app?",
      "options": ["App.js", "index.js", "Main.js", "Home.js"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the purpose of the 'key' prop when rendering lists?",
      "options": [
        "To add styling",
        "To track element identity for efficient DOM updates",
        "To disable items",
        "To attach event listeners"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is React Fragment used for?",
      "options": [
        "To wrap multiple elements without adding extra nodes to the DOM",
        "To group event handlers",
        "To create child components",
        "To style multiple elements"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What does ReactDOM.createRoot do?",
      "options": [
        "Initializes the virtual DOM",
        "Creates a new page",
        "Creates the root component for rendering in React 18+",
        "Starts the browser server"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "Which keyword is used to export a component?",
      "options": ["module", "package", "require", "export"],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "Which of the following is used to import other React files or libraries?",
      "options": ["export", "module", "import", "extends"],
      "correctOption": 2,
      "points": 10
    }
  ]
}
